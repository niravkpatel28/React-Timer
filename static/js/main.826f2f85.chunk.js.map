{"version":3,"sources":["components/common/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","state","seconds","timerStarted","timerID","ticker","setState","startTimer","timerId","console","log","setInterval","pauseTimer","clearInterval","this","props","name","Math","floor","onClick","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mOAuEeA,E,2MA7DXC,MAAM,CACFC,QAAS,EACTC,cAAc,EACdC,QAAS,M,EAGbC,OAAQ,WACJ,EAAKC,SACD,CACIJ,QAAS,EAAKD,MAAMC,QAAQ,K,EAMxCK,WAAa,WACT,IAAIC,EACA,EAAKP,MAAME,aAUXM,QAAQC,IAAI,qBATZF,EAAUG,YAAY,EAAKN,OAAO,KAClC,EAAKC,SACD,CACIH,cAAa,EACbC,QAASI,IAEhBC,QAAQC,IAAI,YACZD,QAAQC,IAAI,EAAKT,MAAMG,W,EAOhCQ,WAAa,WAEN,EAAKX,MAAME,eACVU,cAAc,EAAKZ,MAAMG,SACzB,EAAKE,SAAS,CACVH,cAAa,EACbC,QAAQ,S,wEAKhB,OACI,6BACI,wCAAcU,KAAKC,MAAMC,MACzB,6BACA,iDACA,+BAAKC,KAAKC,MAAOJ,KAAKb,MAAMC,QAAS,IAArC,QAA+CY,KAAKb,MAAMC,QAAQ,GAAlE,KAEA,4BAAQiB,QAASL,KAAKP,YAAtB,iBACA,4BAAQY,QAASL,KAAKF,YAAtB,sB,GA1DIQ,IAAMC,WCYXC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAOP,KAAK,iBCIAQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.826f2f85.chunk.js","sourcesContent":["\nimport React from 'react'\n\nclass Timer extends React.Component {\n\n    // constructor(props){\n    //     super(props);\n    //     // setInterval(this.ticker, 1000);\n    // }\n    // defines internal state of the object \n    state={\n        seconds: 0,\n        timerStarted: false,\n        timerID: null\n    }\n\n    ticker =()=>{\n        this.setState(\n            {\n                seconds: this.state.seconds+1\n            });\n            \n    }\n\n    //click event handler \n    startTimer = ()=>{\n        let timerId\n        if(!this.state.timerStarted){\n            timerId = setInterval(this.ticker,1000);\n            this.setState(\n                {\n                    timerStarted:true,\n                    timerID: timerId // timerId is set locally\n                })\n             console.log('timer on');\n             console.log(this.state.timerID);\n        }else{\n            console.log('Timer Already On');\n        }\n        \n    }\n    \n    pauseTimer = ()=>{\n        //clear interval with timer id\n        if(this.state.timerStarted){\n            clearInterval(this.state.timerID);\n            this.setState({\n                timerStarted:false,\n                timerID:null\n            })\n        }\n    }\n    render(){\n        return (\n            <div>\n                <h2> Welcome {this.props.name}</h2>\n                <br/>\n                <p> Minute : Seconds </p>\n                <p> {Math.floor((this.state.seconds)/60)}  :  {this.state.seconds%60} </p>\n                {/* <p>Total Seconds : {this.state.seconds}</p> */}\n                <button onClick={this.startTimer}> Start Timer </button>\n                <button onClick={this.pauseTimer}> Pause Timer </button>\n\n                \n            </div> \n \n        )\n    }\n\n}\n\nexport default Timer;\n// using functional component   \n\n\n// const Timer = (props) => {\n//     const [state, setstate] = useState(0);\n\n//     let counter = 0;\n    \n\n    \n//         useEffect(()=>{\n\n//             return ()=>{\n\n//             }\n//         },[id,name])\n    \n\n//     return (\n//         <div>\n//             <h2> Welcome {props.name}</h2>\n//             <br/>\n//             <p> Timer {state}</p>\n//         </div> \n\n//     )\n// }\n\n","import React from \"react\";\n// import logo from './logo.svg';\nimport \"./App.css\";\nimport Timer from \"../src/components/common/Timer\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Timer name=\"Timer App\" />\n       \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}